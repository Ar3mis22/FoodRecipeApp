import 'dart:convert';
import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:untitled/Models/Utils.dart';
import 'package:untitled/Screens/RecipeInfo.dart';
import '../Models/models.dart';
import 'UserPage.dart';
import 'package:http/http.dart' as http;

class RecipesDisplay extends StatefulWidget {
  @override
  State<RecipesDisplay> createState() => _RecipesDisplayState();
}

class _RecipesDisplayState extends State<RecipesDisplay> {
  bool fav = false;
  String? summary;
  String? query;
  String? title;
  String? image;
  int? time;
  bool? isVeg;
  RecipesMain? recipesMain;
  List<Recipes>? _recipesList;

  @override
  void initState() {
    getRecipes(query);
    super.initState();
  }

  getRecipes(String? query) async {
    String url =
        "https://api.spoonacular.com/recipes/random?apiKey=ecbd5b3ff9a341ee8f02aa69807cc6d0&number=10";
    http.Response response = await http.get(Uri.parse(url));
    var data = jsonDecode(response.body);
    try {
      if (response.statusCode == 200) {
        title = data['recipes'][0]['title'];
        image = data['recipes'][0]['image'];
        isVeg = data['recipes'][0]['vegetarian'];
        time = data['recipes'][0]['readyInMinutes'];
        summary = data['recipes'][0]['summary'];
        var recipesMain = RecipesMain.fromJson(data);
        _recipesList = recipesMain.recipes;
        if (query != null) {
          _recipesList = _recipesList!
              .where((element) =>
              element.title!.toLowerCase().contains(query.toLowerCase()))
              .toList();
        }
      } else {
        print(response.statusCode);
      }
      return _recipesList;
    } catch (e) {
      print(e);
    }
    print(response.statusCode);
    log(data.toString());
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        appBar: AppBar(
          title: Text("Recipes"),
          backgroundColor: Colors.green,
          actions: [
            IconButton(
                onPressed: () {
                  showSearch(
                      context: context, delegate: CustomSearchDelegate());
                },
                icon: Icon(Icons.search_outlined)),
          ],
        ),
        body: FutureBuilder(
            future: getRecipes(query),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(
                  child: CircularProgressIndicator(),
                );
              } else if (snapshot.hasError) {
                return Center(
                  child: Text("Error occurred!"),
                );
              }
              return ListView.builder(
                  shrinkWrap: true,
                  itemCount: _recipesList!.length,
                  itemBuilder: (BuildContext context, int index) {
                    Recipes recipe = _recipesList![index];
                    return RecipeCards(
                      title: recipe.title!,
                      image: recipe.image!,
                      isVeg: recipe.vegetarian,
                      time: recipe.preparationMinutes,
                      summary: summary!,
                      fav: fav,
                      c: 0,
                      docID: "",
                    );
                  });
            }),
        drawer: NavigationDrawer(),
      ),
    );
  }
}

class RecipeCards extends StatelessWidget {
  String docID;
  int c;
  bool fav;
  String title;
  String image;
  int time;
  bool isVeg;
  String summary;
  RecipeCards(
      {Key? key,
        required this.title,
        required this.image,
        required this.time,
        required this.isVeg,
        required this.summary,
        required this.fav,
        required this.c,
        required this.docID})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
        elevation: 50,
        shadowColor: Colors.green,
        borderOnForeground: true,
        margin: EdgeInsets.all(10),
        child: SizedBox(
            height: 100,
            child: ListTile(
              isThreeLine: true,
              subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Padding(padding: EdgeInsets.all(7)),
                    isVeg
                        ? Container(
                      child: Text(
                        "Vegeterian",
                        style: TextStyle(
                            color: Colors.green,
                            fontSize: 13,
                            fontWeight: FontWeight.w500),
                      ),
                    )
                        : Container(
                      child: Text(
                        "Non Vegetarian",
                        style: TextStyle(
                            color: Colors.red,
                            fontSize: 13,
                            fontWeight: FontWeight.w500),
                      ),
                    ),
                    time != -1
                        ? Container(
                      child: Text(
                        "Preparation Time : " + time.toString() + " mins",
                        style: TextStyle(
                            color: Colors.yellowAccent[700],
                            fontSize: 13,
                            fontWeight: FontWeight.w500),
                      ),
                    )
                        : Container(
                      child: Text(
                        "Preparation Time : NA",
                        style: TextStyle(
                            color: Colors.yellowAccent[700],
                            fontSize: 13,
                            fontWeight: FontWeight.w500),
                      ),
                    )
                  ]),
              onTap: () {
                Navigator.of(context).push(MaterialPageRoute(
                    builder: (context) => RecipeInfo(
                      title: title,
                      image: image,
                      isVeg: isVeg,
                      time: time,
                      summary: summary,
                    )));
              },
              title: SizedBox(
                height: 20,
                child: Text(
                  title,
                  style: TextStyle(fontSize: 17, fontWeight: FontWeight.w700),
                  overflow: TextOverflow.ellipsis,
                ),
              ),
              leading: Container(
                  width: 90,
                  height: 150,
                  padding: EdgeInsets.only(top: 5000, left: 80),
                  decoration: BoxDecoration(
                      image: DecorationImage(
                        image: NetworkImage(image),
                        fit: BoxFit.contain,
                      )),
                  child: Text("")),
              trailing: StatefulBuilder(builder: (context, innerstate) {
                return InkWell(
                  onTap: () {
                    innerstate(() {
                      fav = !fav;
                    });
                    fav
                        ? Utils.showSnackBar2("Added to favourites!")
                        : Utils.showSnackBar2("Removed from favourites!");
                    if (fav == true && c == 0) {
                      createFavorite(Fav(
                          Summary: summary,
                          image: image,
                          isVeg: isVeg,
                          time: time,
                          title: title));
                    }
                    if (fav == false && c > 0) {
                      deleteFavorite();
                    }
                  },
                  child: !fav
                      ? Icon(
                    Icons.favorite_outline,
                    size: 25.0,
                  )
                      : Icon(
                    Icons.favorite,
                    size: 25.0,
                    color: Colors.red,
                  ),
                );
              }),
            )));
  }

  Future createFavorite(Fav fav) async {
    final docFav = FirebaseFirestore.instance.collection("Favorites").doc();
    fav.id = docFav.id;
    docID = fav.id;
    final json = fav.toJson();
    await docFav.set(json);
    c = c + 1;
  }

  void deleteFavorite() {
    final docFav =
    FirebaseFirestore.instance.collection("Favorites").doc(docID);
    print(docID);
    docFav.delete();
    c = c - 1;
  }
}

class CustomSearchDelegate extends SearchDelegate {
  List<Recipes>? searchterms;
  getRecipeData({required String? query}) async {
    try {
      searchterms = await _RecipesDisplayState().getRecipes(query);
      print(searchterms!.length);
    } catch (e) {
      print(e);
    }
  }

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      IconButton(
          onPressed: () {
            query = "";
          },
          icon: Icon(Icons.clear))
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
        onPressed: () {
          close(context, null);
        },
        icon: Icon(Icons.arrow_back_sharp));
  }

  @override
  Widget buildResults(BuildContext context) {
    return FutureBuilder(
        future: getRecipeData(query: query),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
              child: CircularProgressIndicator(),
            );
          } else if (snapshot.hasError) {
            return Center(
              child: Text("Error occurred!"),
            );
          }
          return searchterms != null
              ? ListView.builder(
              shrinkWrap: true,
              itemCount: searchterms!.length,
              itemBuilder: (BuildContext context, int index) {
                Recipes recipe = searchterms![index];
                return RecipeCards(
                  title: recipe.title!,
                  image: recipe.image!,
                  isVeg: recipe.vegetarian,
                  time: recipe.preparationMinutes,
                  summary: recipe.summary!,
                  fav: false,
                  c: 0,
                  docID: "",
                );
              })
              : Center(
            child: Text("No results obtained"),
          );
        });
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    return FutureBuilder(
        future: getRecipeData(query: query),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
              child: CircularProgressIndicator(),
            );
          } else if (snapshot.hasError) {
            return Center(
              child: Text("Error occurred!"),
            );
          }
          return searchterms != null
              ? ListView.builder(
              shrinkWrap: true,
              itemCount: searchterms!.length,
              itemBuilder: (BuildContext context, int index) {
                Recipes recipe = searchterms![index];
                return RecipeCards(
                  title: recipe.title!,
                  image: recipe.image!,
                  isVeg: recipe.vegetarian,
                  time: recipe.preparationMinutes,
                  summary: recipe.summary!,
                  fav: false,
                  docID: "",
                  c: 0,
                );
              })
              : Center(
            child: Text("No results obtained"),
          );
        });
  }
}

class Fav {
  String id;
  final String Summary;
  final String image;
  final String title;
  final bool isVeg;
  final int time;

  Fav(
      {this.id = '',
        required this.Summary,
        required this.image,
        required this.isVeg,
        required this.time,
        required this.title});

  Map<String, dynamic> toJson() => {
    'id': id,
    'Summary': Summary,
    'isVeg': isVeg,
    'time': time,
    'title': title,
    'image': image
  };

  static Fav fromJson(Map<String, dynamic> json) => Fav(
    Summary: json["Summary"],
    isVeg: json["isVeg"],
    time: json["time"],
    title: json["title"],
    image: json["image"],
    id: json['id'],
  );
}